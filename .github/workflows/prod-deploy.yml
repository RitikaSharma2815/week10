name: Production Deploy (on tag)

on:
  push:
    tags:
      - "v*"

jobs:
  build-and-push:
    name: Build & push images with :prod tag
    runs-on: ubuntu-latest
    env:
      ACR_LOGIN_SERVER: ${{ secrets.ACR_LOGIN_SERVER }}
      ACR_USERNAME:     ${{ secrets.ACR_USERNAME }}
      ACR_PASSWORD:     ${{ secrets.ACR_PASSWORD }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Log in to ACR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.ACR_LOGIN_SERVER }}
          username: ${{ env.ACR_USERNAME }}
          password: ${{ env.ACR_PASSWORD }}

      # Build & push all images (prod tags)
      - name: Build & push frontend
        uses: docker/build-push-action@v6
        with:
          context: ./frontend
          push: true
          tags: |
            ${{ env.ACR_LOGIN_SERVER }}/frontend:${{ github.sha }}
            ${{ env.ACR_LOGIN_SERVER }}/frontend:prod

      - name: Build & push customer_service
        uses: docker/build-push-action@v6
        with:
          context: ./backend/customer_service
          push: true
          tags: |
            ${{ env.ACR_LOGIN_SERVER }}/customer_service:${{ github.sha }}
            ${{ env.ACR_LOGIN_SERVER }}/customer_service:prod

      - name: Build & push order_service
        uses: docker/build-push-action@v6
        with:
          context: ./backend/order_service
          push: true
          tags: |
            ${{ env.ACR_LOGIN_SERVER }}/order_service:${{ github.sha }}
            ${{ env.ACR_LOGIN_SERVER }}/order_service:prod

      - name: Build & push product_service
        uses: docker/build-push-action@v6
        with:
          context: ./backend/product_service
          push: true
          tags: |
            ${{ env.ACR_LOGIN_SERVER }}/product_service:${{ github.sha }}
            ${{ env.ACR_LOGIN_SERVER }}/product_service:prod

  deploy:
    name: Deploy product_service to PROD ACI + health
    runs-on: ubuntu-latest
    needs: build-and-push
    env:
      ACR_LOGIN_SERVER:   ${{ secrets.ACR_LOGIN_SERVER }}
      ACR_USERNAME:       ${{ secrets.ACR_USERNAME }}
      ACR_PASSWORD:       ${{ secrets.ACR_PASSWORD }}
      AZURE_CREDENTIALS:  ${{ secrets.AZURE_CREDENTIALS }}
      RESOURCE_GROUP:     sit722-prod-rg          
      LOCATION:           australiaeast           
      NAME:               prod-product            
    steps:
      - name: Azure login
        uses: azure/login@v2
        with:
          creds: ${{ env.AZURE_CREDENTIALS }}

      - name: Ensure prod resource group exists
        run: az group create --name $RESOURCE_GROUP --location $LOCATION
      - name: Delete old container (ignore if missing)
        run: az container delete -g $RESOURCE_GROUP -n $NAME --yes || true

      - name: Create container from :prod image
        run: |
          az container create \
            --resource-group $RESOURCE_GROUP \
            --name $NAME \
            --image $ACR_LOGIN_SERVER/product_service:prod \
            --registry-login-server $ACR_LOGIN_SERVER \
            --registry-username $ACR_USERNAME \
            --registry-password $ACR_PASSWORD \
            --dns-name-label $NAME \
            --ports 8000

      - name: Wait for public IP and /health
        run: |
          IP=""
          for i in {1..30}; do
            IP=$(az container show -g $RESOURCE_GROUP -n $NAME --query ipAddress.ip -o tsv || true)
            [ -n "$IP" ] && [ "$IP" != "null" ] && break
            echo "Waiting for IP... ($i/30)"; sleep 5
          done
          echo "IP=$IP"
          if [ -z "$IP" ] || [ "$IP" = "null" ]; then
            echo "No IP assigned"; exit 1
          fi

          for i in {1..30}; do
            if curl -fsS "http://$IP:8000/health" >/dev/null; then
              echo "Prod product_service healthy at http://$IP:8000/health"
              exit 0
            fi
            echo "Waiting for /health... ($i/30)"; sleep 5
          done
          echo "Health check failed"; exit 1
