name: Production Deploy (on main)

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    # Common env you already have (from earlier)
    env:
      RG: sit722-prod-rg
      REGION: australiaeast
      ACR_LOGIN_SERVER: ${{ secrets.ACR_LOGIN_SERVER }}
      ACR_USERNAME: ${{ secrets.ACR_USERNAME }}
      ACR_PASSWORD: ${{ secrets.ACR_PASSWORD }}

    steps:
      - uses: actions/checkout@v4

      # Gate: do we have AZURE_CREDENTIALS?
      - name: Gate deploy on presence of AZURE_CREDENTIALS
        id: gate
        shell: bash
        run: |
          if [ -z "${{ secrets.AZURE_CREDENTIALS }}" ]; then
            echo "deploy=false" >> "$GITHUB_OUTPUT"
          else
            echo "deploy=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Skip note (no credentials configured)
        if: steps.gate.outputs.deploy == 'false'
        run: |
          echo "::notice::AZURE_CREDENTIALS not set in repo secrets."
          echo "Skipping production deployment. Add the Service Principal JSON"
          echo "as repo secret 'AZURE_CREDENTIALS' and re-run."

      # ---- Real deploy only when deploy=true ----

      - name: Azure login
        if: steps.gate.outputs.deploy == 'true'
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Ensure resource group exists
        if: steps.gate.outputs.deploy == 'true'
        run: az group create -n "$RG" -l "$REGION"

      - name: Replace prod-product-db
        if: steps.gate.outputs.deploy == 'true'
        shell: bash
        run: |
          az container delete -g "$RG" -n prod-product-db --yes --no-wait || true
          az container wait   -g "$RG" -n prod-product-db --deleted --interval 5 --timeout 120 || true
          az container create -g "$RG" -n prod-product-db \
            --image docker.io/library/postgres:15-alpine \
            --os-type Linux --cpu 1 --memory 1 \
            --ports 5432 --ip-address Public \
            --environment-variables POSTGRES_DB=products POSTGRES_USER=postgres POSTGRES_PASSWORD=postgres \
            --location "$REGION"
          DB_IP=$(az container show -g "$RG" -n prod-product-db --query ipAddress.ip -o tsv)
          echo "DB_IP=$DB_IP" >> "$GITHUB_ENV"

      - name: Replace prod-product
        if: steps.gate.outputs.deploy == 'true'
        shell: bash
        run: |
          az container delete -g "$RG" -n prod-product --yes --no-wait || true
          az container wait   -g "$RG" -n prod-product --deleted --interval 5 --timeout 120 || true
          az container create -g "$RG" -n prod-product \
            --image "$ACR_LOGIN_SERVER/product_service:testing" \
            --registry-login-server "$ACR_LOGIN_SERVER" \
            --registry-username "$ACR_USERNAME" \
            --registry-password "$ACR_PASSWORD" \
            --os-type Linux --cpu 1 --memory 1 \
            --ports 8000 --ip-address Public \
            --environment-variables \
              POSTGRES_HOST=${{ env.DB_IP }} \
              POSTGRES_USER=postgres \
              POSTGRES_PASSWORD=postgres \
              POSTGRES_DB=products \
            --location "$REGION"
          PRODUCT_IP=$(az container show -g "$RG" -n prod-product --query ipAddress.ip -o tsv)
          echo "PRODUCT_IP=$PRODUCT_IP" >> "$GITHUB_ENV"

      - name: Replace prod-frontend
        if: steps.gate.outputs.deploy == 'true'
        shell: bash
        run: |
          az container delete -g "$RG" -n prod-frontend --yes --no-wait || true
          az container wait   -g "$RG" -n prod-frontend --deleted --interval 5 --timeout 120 || true
          az container create -g "$RG" -n prod-frontend \
            --image "$ACR_LOGIN_SERVER/frontend:testing" \
            --registry-login-server "$ACR_LOGIN_SERVER" \
            --registry-username "$ACR_USERNAME" \
            --registry-password "$ACR_PASSWORD" \
            --os-type Linux --cpu 1 --memory 1.5 \
            --ports 80 --ip-address Public \
            --dns-name-label sit722-prod-$RANDOM \
            --location "$REGION"

      - name: Smoke test Product API
        if: steps.gate.outputs.deploy == 'true'
        shell: bash
        run: |
          echo "Testing http://$PRODUCT_IP:8000"
          for i in {1..12}; do
            if curl -fsS "http://$PRODUCT_IP:8000" | grep -q 'Welcome to the Product Service'; then
              echo "OK"; exit 0
            fi
            echo "retry $i"; sleep 5
          done
          echo "Product endpoint failed" >&2
          exit 1