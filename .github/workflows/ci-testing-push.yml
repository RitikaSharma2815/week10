name: CI (tests → build → push)

on:
  push:
    branches: [ testing ]

jobs:
  test-build-push:
    runs-on: ubuntu-latest

    env:
      ACR_LOGIN_SERVER: ${{ secrets.ACR_LOGIN_SERVER }}
      ACR_USERNAME:     ${{ secrets.ACR_USERNAME }}
      ACR_PASSWORD:     ${{ secrets.ACR_PASSWORD }}

    steps:
      # --- BASICS ---
      - name: Checkout
        uses: actions/checkout@v4

      - name: Show repo root (sanity)
        run: ls -la

      # --- ACCEPTANCE TEST STACK ---
      - name: Start stack for acceptance tests
        run: docker compose -f docker-compose.ci.yml up -d --build

      - name: Show compose ps
        run: docker compose -f docker-compose.ci.yml ps

      - name: Peek product_service logs (non-fatal)
        run: docker compose -f docker-compose.ci.yml logs --tail=200 product_service || true

      - name: Wait for Product API to be ready
        run: |
          for i in {1..40}; do
            if curl -fsS http://localhost:8000/ >/dev/null; then
              echo "Product API is up"; exit 0
            fi
            echo "Waiting for API... ($i/40)"; sleep 4
          done
          echo "API failed to become ready" >&2
          docker compose -f docker-compose.ci.yml logs || true
          exit 1

      - name: Run acceptance tests
        run: |
          python -m pip install -U pip
          pip install requests pytest
          pytest -q tests/acceptance/test_product_api.py

      - name: Show compose logs on failure
        if: failure()
        run: docker compose -f docker-compose.ci.yml logs || true

      - name: Stop acceptance stack
        if: always()
        run: |
          if [ -f docker-compose.ci.yml ]; then
            echo "Cleaning up docker-compose stack..."
            docker compose -f docker-compose.ci.yml down -v || true
          else
            echo "docker-compose.ci.yml NOT found, skipping cleanup."
          fi

      # --- BUILD & PUSH (only if tests pass) ---
      - name: Log in to ACR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.ACR_LOGIN_SERVER }}
          username: ${{ env.ACR_USERNAME }}
          password: ${{ env.ACR_PASSWORD }}

      - name: Build & push frontend
        uses: docker/build-push-action@v6
        with:
          context: ./frontend
          push: true
          tags: |
            ${{ env.ACR_LOGIN_SERVER }}/frontend:${{ github.sha }}
            ${{ env.ACR_LOGIN_SERVER }}/frontend:testing

      - name: Build & push customer_service
        uses: docker/build-push-action@v6
        with:
          context: ./backend/customer_service
          push: true
          tags: |
            ${{ env.ACR_LOGIN_SERVER }}/customer_service:${{ github.sha }}
            ${{ env.ACR_LOGIN_SERVER }}/customer_service:testing

      - name: Build & push order_service
        uses: docker/build-push-action@v6
        with:
          context: ./backend/order_service
          push: true
          tags: |
            ${{ env.ACR_LOGIN_SERVER }}/order_service:${{ github.sha }}
            ${{ env.ACR_LOGIN_SERVER }}/order_service:testing

      - name: Build & push product_service
        uses: docker/build-push-action@v6
        with:
          context: ./backend/product_service
          push: true
          tags: |
            ${{ env.ACR_LOGIN_SERVER }}/product_service:${{ github.sha }}
            ${{ env.ACR_LOGIN_SERVER }}/product_service:testing