name: CI (tests → build → push)

on:
  push:
    branches: [ testing ]

jobs:
  test-build-push:
    runs-on: ubuntu-latest

    env:
      # From GitHub → Settings → Secrets and variables → Actions
      ACR_LOGIN_SERVER: ${{ secrets.ACR_LOGIN_SERVER }}
      ACR_NAME:         ${{ secrets.ACR_NAME }}
      ACR_USERNAME:     ${{ secrets.ACR_USERNAME }}
      ACR_PASSWORD:     ${{ secrets.ACR_PASSWORD }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # ---------- UNIT TESTS ----------
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Customer Service • install & test
        working-directory: backend/customer_service
        run: |
          python -m pip install -U pip
          pip install -r requirements-dev.txt || pip install -r requirements.txt
          pytest -q

      - name: Order Service • install & test
        working-directory: backend/order_service
        run: |
          python -m pip install -U pip
          pip install -r requirements-dev.txt || pip install -r requirements.txt
          pytest -q

      - name: Product Service • install & test
        working-directory: backend/product_service
        run: |
          python -m pip install -U pip
          pip install -r requirements-dev.txt || pip install -r requirements.txt
          pytest -q

      # ---------- ACCEPTANCE TESTS ----------
      # This brings up Postgres + product_service from docker-compose.ci.yml
      - name: Start stack for acceptance tests
        run: |
          docker compose -f docker-compose.ci.yml up -d --build

      - name: Wait for Product API to be ready
        run: |
          for i in {1..24}; do
            if curl -fsS http://localhost:8000/ >/dev/null; then
              echo "Product API is up"; exit 0
            fi
            echo "Waiting for API... ($i/24)"; sleep 5
          done
          echo "API failed to become ready" >&2
          docker compose -f docker-compose.ci.yml logs
          exit 1

      - name: Run acceptance tests
        run: |
          python -m pip install -U pip
          pip install requests pytest
          pytest -q tests/acceptance/test_product_api.py

      - name: Show compose logs on failure
        if: failure()
        run: docker compose -f docker-compose.ci.yml logs

      - name: Stop acceptance stack
        if: always()
        run: docker compose -f docker-compose.ci.yml down -v

      # ---------- BUILD & PUSH (only runs if all tests passed) ----------
      - name: Log in to ACR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.ACR_LOGIN_SERVER }}
          username: ${{ env.ACR_USERNAME }}
          password: ${{ env.ACR_PASSWORD }}

      - name: Build & push frontend
        uses: docker/build-push-action@v6
        with:
          context: ./frontend
          push: true
          tags: |
            ${{ env.ACR_LOGIN_SERVER }}/frontend:${{ github.sha }}
            ${{ env.ACR_LOGIN_SERVER }}/frontend:testing

      - name: Build & push customer_service
        uses: docker/build-push-action@v6
        with:
          context: ./backend/customer_service
          push: true
          tags: |
            ${{ env.ACR_LOGIN_SERVER }}/customer_service:${{ github.sha }}
            ${{ env.ACR_LOGIN_SERVER }}/customer_service:testing

      - name: Build & push order_service
        uses: docker/build-push-action@v6
        with:
          context: ./backend/order_service
          push: true
          tags: |
            ${{ env.ACR_LOGIN_SERVER }}/order_service:${{ github.sha }}
            ${{ env.ACR_LOGIN_SERVER }}/order_service:testing

      - name: Build & push product_service
        uses: docker/build-push-action@v6
        with:
          context: ./backend/product_service
          push: true
          tags: |
            ${{ env.ACR_LOGIN_SERVER }}/product_service:${{ github.sha }}
            ${{ env.ACR_LOGIN_SERVER }}/product_service:testing